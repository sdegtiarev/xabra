#!/usr/bin/env perl
use LWP::UserAgent;
use HTML::TokeParser;
use DateTime;
use DateTime::TimeZone;
use DateTime::Format::Natural;
use Date::Language;
use utf8;

my $parser=new DateTime::Format::Natural;
my $url="http://habrahabr.ru/posts/top/page";

while($ARGV[0]=~/^-/) {
	my $opt=shift;
	last if($opt eq '--');
	
	if($opt=~s/^-r//) { $rep= ($opt eq "")? shift : $opt; }
	elsif($opt=~s/^-w//) { $url="http://habrahabr.ru/posts/top/weekly/page"; unshift(@ARGV, '-'.$opt) if($opt ne ""); }
	elsif($opt=~s/^-m//) { $url="http://habrahabr.ru/posts/top/monthly/page"; unshift(@ARGV, '-'.$opt) if($opt ne ""); }

	elsif($opt=~s/^-h//) { usage(); exit(0); }
	else { usage(); die "$opt: invalid option"; }
}
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
select STDERR; $|=1;
select STDOUT; $|=1;

my $agent=new LWP::UserAgent;
$agent->agent("habra/1.0");

xabrastat($url);
while($rep) {
	sleep($rep);
	xabrastat($url);
}



sub xabrastat
{
	my $url=shift;
	for(my $n=1; my $page=get_page($url.$n); $n++) {
		my $stream=HTML::TokeParser->new(\$page) or die "parser: $!";
		my $time=DateTime->now('time_zone' => 'Europe/Moscow')->epoch();


		while(my $t=to_post($stream)) {
			my $id=$t->[1]->{id};
			my ($post_date,@stat)=post_stat($stream);
			my ($at, $since)=post_date($post_date);

			printf "%-10d  %-12s  %20s    %-8d  %-6d  %-6d\n", $time, $id, $at, @stat;
		}
	}
}



sub get_page
{
	my $req=HTTP::Request->new(GET => shift);
	my $rsp=$agent->request($req);

	return $rsp->decoded_content() if($rsp->is_success);
	undef;
}




sub to_post
{
	my $stream=shift;
	my $t=$stream->get_tag("div");
	while(not $t->[1]->{class}=~/^post\s.*shortcuts_item$/) {
		last if(not $t);
		$t=$stream->get_tag("div");
		last if(not $t);
	}
	return $t;
}





sub post_stat
{
	my $stream=shift;
	my $ident=0;
	my @stat=();
	while(my @t=@{$stream->get_tag("div","/div")}) {
		if($t[0] eq "/div") {
			last if($ident == 0);
			$ident--;
		} elsif($t[0] eq "div") {
			$ident++;
			if($t[1]->{class} eq "pageviews") {
				push @stat, $stream->get_text();
			} elsif($t[1]->{class} eq "favs_count") {
				push @stat, $stream->get_text();
			} elsif($t[1]->{class} eq "comments") {
				my $cnt=$stream->get_text("/span");
				$cnt=~s/^[^0-9]*//; $cnt=0 if($cnt eq "");
				push @stat, $cnt;
			} elsif($t[1]->{class} eq "published") {
				push @stat, $stream->get_text();
			}
		}
	}
	@stat;
}
	

sub post_date
{
	my $post_date=shift;
	my $now=DateTime->now('time_zone' => 'Europe/Moscow');
$post_date=~s/^\s+//;
	$post_date=~s/янв.*в /Jan at /;
	$post_date=~s/фев.*в /Feb at /;
	$post_date=~s/мар.*в /Mar at /;
	$post_date=~s/апр.*в /Apr at /;
	$post_date=~s/мая.*в /May at /;
	$post_date=~s/июн.*в /Jun at /;
	$post_date=~s/июл.*в /Jul at /;
	$post_date=~s/авг.*в /Aug at /;
	$post_date=~s/сен.*в /Sep at /;
	$post_date=~s/окт.*в /Oct at /;
	$post_date=~s/ноя.*в /Nov at /;
	$post_date=~s/дек.*в /Dec at /;
	$post_date=~s/вчера в /yesterday at /;
	$post_date=~s/сегодня в /today at /;
#print "$post_date\n";

	my $str=$parser->extract_datetime($post_date);
	my $dt=$parser->parse_datetime($str);
	$dt->set_time_zone('Europe/Moscow');
	my $e1=$now->epoch(), $e2=$dt->epoch();
	my $off=$e1-$e2;
	if($off < 0) {
	
		print STDERR "parsed: $str\n";
		print STDERR "negative offset $off\n";
		print STDERR "    $now => ", $e1, " => ", off2time($e1), "\n";
		print STDERR  "    $dt => ", $e2, " => ", off2time($e2), "\n";
		exit(1);
		
		
	}
	($dt, $off);
}


sub save_stat
{
	my $file=shift;
	local (*FILE);	

	open(FILE, ">> $path/$file") or die "$file: $!";
	print FILE "@_\n";
	close(FILE);
}


sub usage
{
	print "Synopsis: xabra [-w|m] [-r <seconds>] [-h]\n";
	print "Options:\n";
	print "  -r <seconds> : repeat forever, every <seconds>\n";
	print "  -w           : do weekly top\n";
	print "  -m           : do monthly top\n";
	print "  -h           : print this help and quit\n";
}


sub strdump
{
	foreach(@_) {
		my @l=split //;
		foreach(@l) { print ord($_)," "; }
		print "\n";
	}
}


sub off2time
{
	my $h=shift; $h%=3600*24;
	my $s=$h % 60; $h=int($h/60);
	my $m=$h % 60; $h=int($h/60);
	sprintf "%02d:%02d:%02d",$h,$m,$s;
}
	


