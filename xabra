#!/usr/bin/env perl
use LWP::UserAgent;
use HTML::TokeParser;
use DateTime;
use DateTime::TimeZone;
use DateTime::Format::Natural;
use Date::Language;
use utf8;

my $parser=new DateTime::Format::Natural;
my $url="https://habrahabr.ru/all/page";
my $depth=1;
my $get=get_page;

while($ARGV[0]=~/^-/) {
	my $opt=shift;
	last if($opt eq '--');
	
	if($opt=~s/^-r//) { $rep=($opt eq "")? shift : $opt; }
	elsif($opt=~s/^-d//) { $depth=($opt eq "")? shift : $opt; }
	elsif($opt=~s/^-w//) { $get=wget_page; unshift(@ARGV,"-$opt") if($opt ne ""); }

	elsif($opt=~s/^-h//) { usage(); exit(0); }
	else { usage(); die "$opt: invalid option"; }
}
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
select STDERR; $|=1;
select STDOUT; $|=1;

my $agent=new LWP::UserAgent;
#$agent->agent("xabra/1.0");

while(xabrastat($url) and $rep) { sleep($rep); }



sub xabrastat
{
	my $url=shift;
	my $time=DateTime->now('time_zone' => 'Europe/Moscow');
	for(my $n=1; my $page=$get->($url.$n); $n++) {
		my $stream=HTML::TokeParser->new(\$page) or die "parser: $!";

		while(my $id=to_post($stream)) {
			my ($post_date,@stat)=post_stat($stream);
			my $at=post_date($post_date);
			return 1 if(not defined $at);
			if($stat[0]=~s/k$// and $stat[0]=~s/,/./) { $stat[0]*=1000; }

			printf "%s %-6u %s    %-6d %-6d %-6d\n", $time, $id, $at, @stat;
		}
	}
	return 1;
}



sub get_page
{
	my $req=HTTP::Request->new(GET => shift);
	my $rsp=$agent->request($req);
	return $rsp->decoded_content() if($rsp->is_success);
	undef;
}

sub wget_page
{
	my $cmd="wget -qO- ".shift;
	my $page=qx/$cmd/;
	$page;
}


sub to_post
{
	my $stream=shift;
	while(my @t=@{$stream->get_tag("div")}) {
		next if(not $t[1]->{class}=~/post .*shortcuts_item$/);
		my $post=$t[1]->{id};
		$post=~s/^post_//;
		return $post;
	}
	undef;
}





sub post_stat
{
	my $stream=shift;
	my $ident=0;
	my @stat=();
	while(my @t=@{$stream->get_tag("div","span", "a")}) {
		if(  $t[0] eq "div") {
			if($t[1]->{class} eq "published") {
				push @stat, $stream->get_text();
			}
			elsif($t[1]->{class} eq "views-count_post") {
				my $text=$stream->get_text();
				if($text=~s/k$//) { $text=~s/,/./; $text*=1000; }
				push @stat, $text;
			}
		} elsif($t[0] eq "span") {
			if($t[1]->{class} eq "favorite-wjt__counter js-favs_count") {
				push @stat, $stream->get_text();
			}
		} elsif($t[0] eq "a" and $t[1]->{class} eq "post-comments__link post-comments__link_all") {
			push @stat, $stream->get_text();
			last;
		} elsif($t[0] eq "a" and $t[1]->{class} eq "post-comments__link") {
			push @stat, $stream->get_text();
			last;
		}
	}
	@stat;
}
	

sub post_date
{
	my $post_date=shift;
	my $now=DateTime->now('time_zone' => 'Europe/Moscow');
	utf8::decode($post_date);
	$post_date=~s/^\s+//;
	$post_date=~s/янв.*в /Jan at /i;
	$post_date=~s/фев.*в /Feb at /i;
	$post_date=~s/мар.*в /Mar at /i;
	$post_date=~s/апр.*в /Apr at /i;
	$post_date=~s/мая.*в /May at /i;
	$post_date=~s/июн.*в /Jun at /i;
	$post_date=~s/июл.*в /Jul at /i;
	$post_date=~s/авг.*в /Aug at /i;
	$post_date=~s/сен.*в /Sep at /i;
	$post_date=~s/окт.*в /Oct at /i;
	$post_date=~s/ноя.*в /Nov at /i;
	$post_date=~s/дек.*в /Dec at /i;
	$post_date=~s/вчера в /yesterday at /i;
	$post_date=~s/сегодня в /today at /i;

	my $str=$parser->extract_datetime($post_date);
	my $dt=$parser->parse_datetime($str);
	$dt->set_time_zone('Europe/Moscow');
	if(DateTime->compare($now,$dt) < 0) {
		print STDERR "parsed: $post_date => $str\n";
		print STDERR "negative offset $now from $dt\n";
		exit(1);
	}
	my $off=$now->epoch()-$dt->epoch();
	undef $dt if(($now->epoch()-$dt->epoch()) > $depth*24*60*60);
	$dt;
}


sub save_stat
{
	my $file=shift;
	local (*FILE);	

	open(FILE, ">> $path/$file") or die "$file: $!";
	print FILE "@_\n";
	close(FILE);
}


sub usage
{
	print "Synopsis: xabra [-d <days>] [-r <seconds>] [-h]\n";
	print "Options:\n";
	print "  -r <seconds> : repeat forever, every <seconds>\n";
	print "  -d <days>    : look up posts for last <days>\n";
	print "  -h           : print this help and quit\n";
}


sub strdump
{
	foreach(@_) {
		my @l=split //;
		foreach(@l) { print ord($_)," "; }
		print "\n";
	}
}


sub off2time
{
	my $h=shift; $h%=3600*24;
	my $s=$h % 60; $h=int($h/60);
	my $m=$h % 60; $h=int($h/60);
	sprintf "%02d:%02d:%02d",$h,$m,$s;
}
	


